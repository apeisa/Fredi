<?php

/**
 *
 * Copyright 2013 by Antti Peisa
 *
 *
 * ProcessWire 2.3 
 * Copyright (C) 2012 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 */

class FrediProcess extends Process {

	/**
	 * Return information about this module (required)
	 *
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Fredi - field edit', 
			'summary' => 'Edit just a single field.', 
			'version' => 100, 
			'author' => 'Antti Peisa', 
			'permission' => 'page-edit', 
			); 
	}

	const pageName = 'fredi-field-edit';
	
	
	public $pageId;
	public $pageContext;
	public $fields;
	public $fieldsArray = array();
	public $inputField;
	public $pageEdit;

	public function init() {
		parent::init(); // required
	}

	public function ___execute() {
	
		$this->pageId = (int) $this->input->get("id");
		$this->fields = $this->input->get("fields");
		
		$this->pageContext = $this->pages->get($this->pageId);
		//$this->pageContext->setTrackChanges(true); 
		
		// Check if there is not such a page found
		if ( ! $this->pageContext->id) throw new WireException("Page not found");
		
		// Check that this page is editable by current user
		if ( ! $this->pageContext->editable()) throw new WireException("You don't have right to edit this page");
		
		// Ajaxuploader requires this
		$out = "<p style='display: none' id='PageIDIndicator'>$this->pageId</p>";
		$out .= $this->renderFieldsForm();
		
		return $out;
		
		
	}
	
	public function renderFieldsForm() {

		$out = '';
		
		$this->fieldsArray = explode("|", $this->fields);
		
		foreach($this->fieldsArray as $fieldName) {
			// Check if page has the field that wants to be edited
			if ( ! $this->pageContext->fields->has($fieldName)) throw new WireException("There is no field $fieldName on editable page");
				
			// Check if the current user has rights to edit that field
			if ( ! $this->pageContext->editable($fieldName)) throw new WireException("You don't have rights to edit field $fieldName");
		}

		$form = $this->modules->get('InputfieldForm');
		$form->attr('method', 'post'); 
		$form->attr('enctype', 'multipart/form-data'); 
		$form->attr('id', 'FrediForm');
		$form->attr("action", "{$this->config->urls->admin}page/edit/?id=$this->pageId&fields=$this->fields&modal=1");
		
		$fields = $this->pageContext->getInputfields();

		if ($this->fields === "frediAll") {
			// No need to touch the fields
		} 
		// Remove the fields from form that are not on edit link
		else {
			foreach($fields as $field) {
				if ( ! in_array($field->name, $this->fieldsArray)) {
					$fields->remove($field);
				}
			}
		}
		
		

		$form->add($fields);

		$hiddenPageId = $this->modules->get('InputfieldHidden');
		$hiddenPageId->attr("id", "Inputfield_id");
		$hiddenPageId->attr("name", "id");
		$hiddenPageId->value = $this->pageContext->id;
		$form->add($hiddenPageId);

		$submit = $this->modules->get('InputfieldSubmit');
		$form->add($submit);

		// If form was submitted, process it
		if (count($_POST)) {
			$this->pageEdit = $this->modules->get("ProcessPageEdit");
			$this->pageEdit->execute();
		}

		// This script will handle ajax post and also after post is success, it loads the parent page again
		$script = "<script>
$(document).ready( function() {
  var form = $('#FrediForm');


  form.submit( function(e) {

  	if (typeof tinyMCE == 'undefined') {}
  	else tinyMCE.triggerSave();

    $.ajax( {
      type: 'POST',
      url: form.attr( 'action' ),
      data: form.serialize(),
      success: function( response ) {
        console.log( response );
        window.parent.fredi.refresh();
      }
    } );
  e.preventDefault();
  //window.parent.fredi.close();
  
  } );

} );
</script>

		";
		
		
		return $form->render() . $script;
	}

	public function renderPageForm() {
	
		$form = $this->modules->get('InputfieldForm');
		$form = $this->pageEdit->buildForm($form);
		$form->action = $form->action . "&fields=frediAll";
		
		if(count($_POST)) return $this->processInput($form);
	
		return $form->render();
	}


	/**
	 * Called only when your module is installed
	 *
	 * This version creates a new page with this Process module assigned. 
	 *
	 */
	public function ___install() {

		// create the page our module will be assigned to
		$page = new Page();
		$page->template = 'admin';
		$page->name = self::pageName; 

		// installs to the admin "Setup" menu ... change as you see fit
		$page->parent = $this->pages->get($this->config->adminRootPageID)->child('name=page');
		$page->process = $this; 

		// we will make the page title the same as our module title
		$info = self::getModuleInfo();
		$page->title = $info['title'];

		// save the page
		$page->save();

		// tell the user we created this page
		$this->message("Created Page: {$page->path}"); 
	}

	/**
	 * Called only when your module is uninstalled
	 *
	 * This should return the site to the same state it was in before the module was installed. 
	 *
	 */
	public function ___uninstall() {

		// find the page we installed, locating it by the process field (which has the module ID)
		// it would probably be sufficient just to locate by name, but this is just to be extra sure.
		$moduleID = $this->modules->getModuleID($this); 
		$page = $this->pages->get("template=admin, process=$moduleID, name=" . self::pageName); 

		if($page->id) {
			// if we found the page, let the user know and delete it
			$this->message("Deleting Page: {$page->path}"); 
			$page->delete();
		}
	}
	
}
